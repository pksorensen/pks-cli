using PKS.Infrastructure.Initializers.Base;
using PKS.Infrastructure.Initializers.Context;

namespace PKS.Infrastructure.Initializers.Implementations;

/// <summary>
/// Code-based initializer for creating .NET project structure
/// </summary>
public class DotNetProjectInitializer : CodeInitializer
{
    public override string Id => "dotnet-project";
    public override string Name => ".NET Project Structure";
    public override string Description => "Creates basic .NET project structure and files";
    public override int Order => 10; // Run early

    public override IEnumerable<InitializerOption> GetOptions()
    {
        return new[]
        {
            InitializerOption.String("framework", "Target framework version", "f", "net8.0"),
            InitializerOption.Flag("nullable", "Enable nullable reference types", "n"),
            InitializerOption.Flag("implicit-usings", "Enable implicit global usings"),
            InitializerOption.String("sdk-version", "Specific .NET SDK version to target")
        };
    }

    public override async Task<bool> ShouldRunAsync(InitializationContext context)
    {
        // Only run for .NET-related templates
        var dotnetTemplates = new[] { "console", "api", "web", "agent", "library", "test" };
        return dotnetTemplates.Contains(context.Template.ToLowerInvariant());
    }

    protected override async Task ExecuteCodeLogicAsync(InitializationContext context, InitializationResult result)
    {
        var framework = context.GetOption("framework", "net8.0");
        var enableNullable = context.GetOption("nullable", false);
        var implicitUsings = context.GetOption("implicit-usings", true);
        var sdkVersion = context.GetOption<string?>("sdk-version");

        // Use the target directory directly (it already includes the project name)
        var projectPath = context.TargetDirectory;
        EnsureDirectoryExists(projectPath);

        // Create .csproj file
        var csprojContent = GenerateCsprojContent(context, framework, enableNullable, implicitUsings);
        var csprojPath = Path.Combine(projectPath, $"{context.ProjectName}.csproj");
        await CreateFileAsync(csprojPath, csprojContent, context, result);

        // Create Program.cs based on template
        var programContent = GenerateProgramContent(context);
        var programPath = Path.Combine(projectPath, "Program.cs");
        await CreateFileAsync(programPath, programContent, context, result);

        // Create global.json if SDK version is specified
        if (!string.IsNullOrEmpty(sdkVersion))
        {
            var globalJsonContent = GenerateGlobalJsonContent(sdkVersion);
            var globalJsonPath = Path.Combine(context.TargetDirectory, "global.json");
            await CreateFileAsync(globalJsonPath, globalJsonContent, context, result);
        }

        // Create .gitignore
        var gitignoreContent = GenerateGitIgnoreContent();
        var gitignorePath = Path.Combine(context.TargetDirectory, ".gitignore");
        await CreateFileAsync(gitignorePath, gitignoreContent, context, result);

        result.Message = $"Created .NET {framework} project structure";
    }

    private string GenerateCsprojContent(InitializationContext context, string? framework, bool enableNullable, bool implicitUsings)
    {
        var nullable = enableNullable ? "<Nullable>enable</Nullable>" : "";
        var usings = implicitUsings ? "<ImplicitUsings>enable</ImplicitUsings>" : "";
        
        var outputType = context.Template.ToLowerInvariant() switch
        {
            "console" or "agent" => "Exe",
            "library" => "Library",
            _ => "Exe"
        };

        return $"""
<Project Sdk="Microsoft.NET.Sdk{(context.Template == "web" || context.Template == "api" ? ".Web" : "")}">

  <PropertyGroup>
    <OutputType>{outputType}</OutputType>
    <TargetFramework>{framework}</TargetFramework>
    {nullable}
    {usings}
  </PropertyGroup>

</Project>
""";
    }

    private string GenerateProgramContent(InitializationContext context)
    {
        return context.Template.ToLowerInvariant() switch
        {
            "console" => GenerateConsoleProgram(context),
            "api" => GenerateApiProgram(context),
            "web" => GenerateWebProgram(context),
            "agent" => GenerateAgentProgram(context),
            _ => GenerateConsoleProgram(context)
        };
    }

    private string GenerateConsoleProgram(InitializationContext context)
    {
        return $"""
// {context.ProjectName} - Console Application
// Generated by PKS CLI

Console.WriteLine("Hello from {context.ProjectName}!");
Console.WriteLine("Welcome to your new .NET application.");

// TODO: Add your application logic here
""";
    }

    private string GenerateApiProgram(InitializationContext context)
    {
        return $@"// {context.ProjectName} - Web API Application
// Generated by PKS CLI

var builder = WebApplication.CreateBuilder(args);

// Add services to the container.
builder.Services.AddControllers();
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen();

var app = builder.Build();

// Configure the HTTP request pipeline.
if (app.Environment.IsDevelopment())
{{
    app.UseSwagger();
    app.UseSwaggerUI();
}}

app.UseHttpsRedirection();
app.UseAuthorization();
app.MapControllers();

// Add a simple health check endpoint
app.MapGet(""/health"", () => Results.Ok(new {{ Status = ""Healthy"", Service = ""{context.ProjectName}"" }}));

app.Run();
";
    }

    private string GenerateWebProgram(InitializationContext context)
    {
        return $@"// {context.ProjectName} - Web Application
// Generated by PKS CLI

var builder = WebApplication.CreateBuilder(args);

// Add services to the container.
builder.Services.AddControllersWithViews();

var app = builder.Build();

// Configure the HTTP request pipeline.
if (!app.Environment.IsDevelopment())
{{
    app.UseExceptionHandler(""/Home/Error"");
    app.UseHsts();
}}

app.UseHttpsRedirection();
app.UseStaticFiles();
app.UseRouting();
app.UseAuthorization();

app.MapControllerRoute(
    name: ""default"",
    pattern: ""{{controller=Home}}/{{action=Index}}/{{id?}}"");

app.Run();
";
    }

    private string GenerateAgentProgram(InitializationContext context)
    {
        return $@"// {context.ProjectName} - Agentic Application
// Generated by PKS CLI

using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Logging;

var builder = Host.CreateApplicationBuilder(args);

// Configure services for agentic capabilities
builder.Services.AddLogging();
// TODO: Add your agent services here

var host = builder.Build();

var logger = host.Services.GetRequiredService<ILogger<Program>>();
logger.LogInformation(""Starting {context.ProjectName} agentic application..."");

// TODO: Initialize and start your agents here
Console.WriteLine(""ðŸ¤– {context.ProjectName} - Agentic Application"");
Console.WriteLine(""Ready to revolutionize your workflow!"");

await host.RunAsync();
";
    }

    private string GenerateGlobalJsonContent(string sdkVersion)
    {
        return $@"{{
  ""sdk"": {{
    ""version"": ""{sdkVersion}""
  }}
}}
";
    }

    private string GenerateGitIgnoreContent()
    {
        return """
# Build results
[Dd]ebug/
[Dd]ebugPublic/
[Rr]elease/
[Rr]eleases/
x64/
x86/
[Ww][Ii][Nn]32/
[Aa][Rr][Mm]/
[Aa][Rr][Mm]64/
bld/
[Bb]in/
[Oo]bj/
[Ll]og/
[Ll]ogs/

# Visual Studio 2015/2017 cache/options directory
.vs/
# Uncomment if you have tasks that create the project's static files in wwwroot
#wwwroot/

# Visual Studio 2017 auto generated files
Generated\ Files/

# MSTest test Results
[Tt]est[Rr]esult*/
[Bb]uild[Ll]og.*

# NUnit
*.VisualState.xml
TestResult.xml
nunit-*.xml

# Build Results of an ATL Project
[Dd]ebugPS/
[Rr]eleasePS/
dlldata.c

# Benchmark Results
BenchmarkDotNet.Artifacts/

# .NET Core
project.lock.json
project.fragment.lock.json
artifacts/

# ASP.NET Scaffolding
ScaffoldingReadMe.txt

# StyleCop
StyleCopReport.xml

# Files built by Visual Studio
*_i.c
*_p.c
*_h.h
*.ilk
*.meta
*.obj
*.iobj
*.pch
*.pdb
*.ipdb
*.pgc
*.pgd
*.rsp
*.sbr
*.tlb
*.tli
*.tlh
*.tmp
*.tmp_proj
*_wpftmp.csproj
*.log
*.vspscc
*.vssscc
.builds
*.pidb
*.svclog
*.scc

# Chutzpah Test files
_Chutzpah*

# Visual C++ cache files
ipch/
*.aps
*.ncb
*.opendb
*.opensdf
*.sdf
*.cachefile
*.VC.db
*.VC.VC.opendb

# Visual Studio profiler
*.psess
*.vsp
*.vspx
*.sap

# Visual Studio Trace Files
*.e2e

# TFS 2012 Local Workspace
$tf/

# Guidance Automation Toolkit
*.gpState

# ReSharper is a .NET coding add-in
_ReSharper*/
*.[Rr]e[Ss]harper
*.DotSettings.user

# TeamCity is a build add-in
_TeamCity*

# DotCover is a Code Coverage Tool
*.dotCover

# AxoCover is a Code Coverage Tool
.axoCover/*
!.axoCover/settings.json

# Coverlet is a free, cross platform Code Coverage Tool
coverage*.json
coverage*.xml
coverage*.info

# Visual Studio code coverage results
*.coverage
*.coveragexml

# NCrunch
_NCrunch_*
.*crunch*.local.xml
nCrunchTemp_*

# MightyMoose
*.mm.*
AutoTest.Net/

# Web workbench (sass)
.sass-cache/

# Installshield output folder
[Ee]xpress/

# DocProject is a documentation generator add-in
DocProject/buildhelp/
DocProject/Help/*.HxT
DocProject/Help/*.HxC
DocProject/Help/Html2
DocProject/Help/html

# Click-Once directory
publish/

# Publish Web Output
*.[Pp]ublish.xml
*.azurePubxml
# Note: Comment the next line if you want to checkin your web deploy settings,
# but database connection strings (with potential passwords) will be unencrypted
*.pubxml
*.publishproj

# Microsoft Azure Web App publish settings. Comment the next line if you want to
# checkin your Azure Web App publish settings, but sensitive information contained
# in these files may be unencrypted
*.azurePubxml
# Microsoft Azure Build Output
csx/
*.build.csdef

# Microsoft Azure Emulator
ecf/
rcf/

# Windows Store app package directories and files
AppPackages/
BundleArtifacts/
Package.StoreAssociation.xml
_pkginfo.txt
*.appx
*.appxbundle
*.appxupload

# Visual Studio cache files
# files ending in .cache can be ignored
*.[Cc]ache
# but keep track of directories ending in .cache
!?*.[Cc]ache/

# Others
ClientBin/
~$*
*~
*.dbmdl
*.dbproj.schemaview
*.jfm
*.pfx
*.publishsettings
orleans.codegen.cs

# Including strong name files can present a security risk
# (https://github.com/github/gitignore/pull/2483#issue-259490424)
#*.snk

# Since there are multiple workflows, uncomment the next line to ignore bower_components
# (https://github.com/github/gitignore/pull/1529#issuecomment-104372622)
#bower_components/

# RIA/Silverlight projects
Generated_Code/

# Backup & report files from converting an old project file
# to a newer Visual Studio version. Backup files are not needed,
# because we have git ;-)
_UpgradeReport_Files/
Backup*/
UpgradeLog*.XML
UpgradeLog*.htm
CConvertReport.XML

# SQL Server files
*.mdf
*.ldf
*.ndf

# Business Intelligence projects
*.rdl.data
*.bim.layout
*.bim_*.settings
*.rptproj.rsuser
*- [Bb]ackup.rdl
*- [Bb]ackup ([0-9]).rdl
*- [Bb]ackup ([0-9][0-9]).rdl

# Microsoft Fakes
FakesAssemblies/

# GhostDoc plugin setting file
*.GhostDoc.xml

# Node.js Tools for Visual Studio
.ntvs_analysis.dat
node_modules/

# Visual Studio 6 build log
*.plg

# Visual Studio 6 workspace options file
*.opt

# Visual Studio 6 auto-generated workspace file (contains which files were open etc.)
*.vbw

# Visual Studio LightSwitch build output
**/*.HTMLClient/GeneratedArtifacts
**/*.DesktopClient/GeneratedArtifacts
**/*.DesktopClient/ModelManifest.xml
**/*.Server/GeneratedArtifacts
**/*.Server/ModelManifest.xml
_Pvt_Extensions

# Paket dependency manager
.paket/paket.exe
paket-files/

# FAKE - F# Make
.fake/

# CodeRush personal settings
.cr/personal

# Python Tools for Visual Studio (PTVS)
__pycache__/
*.pyc

# Cake - Uncomment if you are using it
# tools/**
# !tools/packages.config

# Tabs Studio
*.tss

# Telerik's JustMock configuration file
*.jmconfig

# BizTalk build output
*.btp.cs
*.btm.cs
*.odx.cs
*.xsd.cs

# OpenCover UI analysis results
OpenCover/

# Azure Stream Analytics local run output
ASALocalRun/

# MSBuild Binary and Structured Log
*.binlog

# NVidia Nsight GPU debugger configuration file
*.nvuser

# MFractors (Xamarin productivity tool) working folder
.mfractor/

# Local History for Visual Studio
.localhistory/

# BeatPulse healthcheck temp database
healthchecksdb

# Backup folder for Package Reference Convert tool in Visual Studio 2017
MigrationBackup/

# Ionide (cross platform F# VS Code tools) working folder
.ionide/

# Fody - auto-generated XML schema
FodyWeavers.xsd

##
## Visual studio for Mac
##


# globs
Makefile.in
*.userprefs
*.usertasks
config.make
config.status
aclocal.m4
install-sh
autom4te.cache/
*.tar.gz
tarballs/
test-results/

# Mac bundle stuff
*.dmg
*.app

# content below from: https://github.com/github/gitignore/blob/master/Global/macOS.gitignore
# General
.DS_Store
.AppleDouble
.LSOverride

# Icon must end with two \r
Icon


# Thumbnails
._*

# Files that might appear in the root of a volume
.DocumentRevisions-V100
.fseventsd
.Spotlight-V100
.TemporaryItems
.Trashes
.VolumeIcon.icns
.com.apple.timemachine.donotpresent

# Directories potentially created on remote AFP share
.AppleDB
.AppleDesktop
Network Trash Folder
Temporary Items
.apdisk

# content below from: https://github.com/github/gitignore/blob/master/Global/Windows.gitignore
# Windows thumbnail cache files
Thumbs.db
ehthumbs.db
ehthumbs_vista.db

# Dump file
*.stackdump

# Folder config file
[Dd]esktop.ini

# Recycle Bin used on file shares
$RECYCLE.BIN/

# Windows Installer files
*.cab
*.msi
*.msix
*.msm
*.msp

# Windows shortcuts
*.lnk

# JetBrains Rider
.idea/
*.sln.iml

##
## Visual Studio Code
##
.vscode/*
!.vscode/settings.json
!.vscode/tasks.json
!.vscode/launch.json
!.vscode/extensions.json
""";
    }
}