#!/bin/bash
# Pre-deployment validation hook for {{ProjectName}}
# Generated by PKS CLI

echo "🚀 Pre-deployment validation for {{ProjectName}}"

# Read JSON input
json_input=$(cat)
command=$(echo "$json_input" | jq -r '.command // empty')
environment=$(echo "$json_input" | jq -r '.environment // "production"')

echo "🎯 Target environment: $environment"

# Environment-specific validations
case "$environment" in
    "production"|"prod")
        echo "🔒 Running production deployment validations..."
        
        # Check for required environment variables
        required_vars=("CONNECTION_STRING" "API_KEY")
        for var in "${required_vars[@]}"; do
            if [ -z "${!var}" ]; then
                echo "❌ Missing required environment variable: $var"
                exit 1
            fi
        done
        
        echo "✅ Environment variables validated"
        ;;
    "staging"|"stage")
        echo "🔧 Running staging deployment validations..."
        ;;
    "development"|"dev")
        echo "🛠️  Running development deployment validations..."
        ;;
    *)
        echo "⚠️  Unknown environment: $environment"
        ;;
esac

# Check deployment prerequisites
echo "Checking deployment prerequisites..."

# Validate build artifacts exist
if [ -d "bin/Release" ] || [ -d "bin/Debug" ]; then
    echo "✅ Build artifacts found"
else
    echo "❌ Build artifacts not found - run build first"
    exit 1
fi

# Check for deployment configuration
deployment_configs=("appsettings.json" "Dockerfile" "deployment.yml" "helm")
config_found=false

for config in "${deployment_configs[@]}"; do
    if [ -f "$config" ] || [ -d "$config" ]; then
        echo "✅ Deployment configuration found: $config"
        config_found=true
        break
    fi
done

if [ "$config_found" = false ]; then
    echo "⚠️  No deployment configuration found"
fi

# Optional: Run pre-deployment tests
echo "🧪 Running pre-deployment validations..."

echo "✅ Pre-deployment validation completed for {{ProjectName}}"
exit 0