name: Semantic Release

on:
  push:
    branches:
      - main
      - release/*
    # Only run when there are actual changes to code
    paths:
      - 'pks-cli/src/**'
      - 'pks-cli/templates/**'
      - '.github/workflows/semantic-release.yml'
  workflow_dispatch:

permissions:
  contents: write
  issues: write
  pull-requests: write
  packages: write

env:
  DOTNET_VERSION: '8.0.x'
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_NOLOGO: true

jobs:
  release:
    name: Semantic Release
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.npm
          ~/.nuget/packages
        key: ${{ runner.os }}-deps-${{ hashFiles('**/package-lock.json', '**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-deps-
          
    - name: Install semantic-release
      run: |
        npm install -g \
          semantic-release \
          @semantic-release/changelog \
          @semantic-release/git \
          @semantic-release/github \
          @semantic-release/exec \
          conventional-changelog-conventionalcommits
          
    - name: Get current version and branch info
      id: current_version
      run: |
        # Extract version from main project file
        VERSION=$(grep -oP '(?<=<Version>)[^<]+' pks-cli/src/pks-cli.csproj || echo "0.0.0")
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Current version: $VERSION"
        
        # Determine if this is a release branch
        BRANCH_NAME=${GITHUB_REF#refs/heads/}
        echo "branch=$BRANCH_NAME" >> $GITHUB_OUTPUT
        echo "Current branch: $BRANCH_NAME"
        
        if [[ $BRANCH_NAME == release/* ]]; then
          # Extract target version from branch name (e.g., release/1.0.0 -> 1.0.0)
          TARGET_VERSION=${BRANCH_NAME#release/}
          echo "target_version=$TARGET_VERSION" >> $GITHUB_OUTPUT
          echo "Target version for pre-releases: $TARGET_VERSION"
          echo "is_release_branch=true" >> $GITHUB_OUTPUT
        else
          echo "is_release_branch=false" >> $GITHUB_OUTPUT
        fi
        
    - name: Build and package .NET projects
      run: |
        echo "üî® Building .NET projects..."
        
        # Determine if this is a pre-release branch
        BRANCH_NAME=${GITHUB_REF#refs/heads/}
        if [[ $BRANCH_NAME == release/* ]]; then
          echo "üì¶ Pre-release branch detected: $BRANCH_NAME"
          # For pre-release, we'll set version after semantic-release determines it
          IS_PRERELEASE=true
        else
          echo "üöÄ Main branch detected: $BRANCH_NAME"
          IS_PRERELEASE=false
        fi
        
        # Build only the main CLI project and templates, skip tests for now
        dotnet restore pks-cli/src/pks-cli.csproj
        dotnet build pks-cli/src/pks-cli.csproj --configuration Release
        
        # Build and pack template projects
        find pks-cli/templates -name "*.csproj" -type f | while read -r template; do
          echo "Building template: $template"
          dotnet build "$template" --configuration Release
        done
        
        echo "Build completed, packages will be created after semantic-release determines version"
        
    - name: Run semantic-release
      id: semantic
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "üöÄ Running semantic release..."
        npx semantic-release
        
    - name: Create packages with correct version
      if: success()
      run: |
        # Get the latest tag (which semantic-release just created)
        LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
        
        if [ -n "$LATEST_TAG" ]; then
          # Remove 'v' prefix to get the version
          VERSION=${LATEST_TAG#v}
          echo "üì¶ Creating packages with version: $VERSION"
          
          # Create packages directory
          mkdir -p packages
          
          # Pack CLI project with the correct version
          dotnet pack pks-cli/src/pks-cli.csproj \
            --configuration Release \
            --output ./packages \
            --no-build \
            -p:PackageVersion=$VERSION
            
          # Pack template projects with the correct version
          find pks-cli/templates -name "*.csproj" -type f | while read -r template; do
            echo "Packing template: $template with version $VERSION"
            dotnet pack "$template" \
              --configuration Release \
              --output ./packages \
              --no-build \
              -p:PackageVersion=$VERSION
          done
          
          echo "‚úÖ Packages created successfully with version $VERSION"
          ls -la packages/
        else
          echo "‚ùå No release tag found, skipping package creation"
        fi
        
    - name: Upload packages to release
      if: success()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Check if any release was created by looking for tags
        LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
        
        if [ -n "$LATEST_TAG" ] && [ -d "packages" ] && [ "$(ls -A packages/*.nupkg 2>/dev/null)" ]; then
          echo "üì¶ Uploading packages to release $LATEST_TAG"
          
          # Upload packages to the release
          for package in packages/*.nupkg; do
            if [ -f "$package" ]; then
              echo "Uploading $(basename $package) to release $LATEST_TAG"
              gh release upload "$LATEST_TAG" "$package" --clobber || echo "Failed to upload $package"
            fi
          done
        else
          echo "‚ÑπÔ∏è No release tag found or no packages to upload"
        fi
        
    - name: Publish to NuGet
      if: success()
      env:
        NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
      run: |
        if [ -n "$NUGET_API_KEY" ] && [ -d "packages" ] && [ "$(ls -A packages/*.nupkg 2>/dev/null)" ]; then
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          
          if [[ $BRANCH_NAME == release/* ]]; then
            echo "üì¶ Publishing PRE-RELEASE packages to NuGet..."
          else
            echo "üì¶ Publishing RELEASE packages to NuGet..."
          fi
          
          for package in packages/*.nupkg; do
            if [ -f "$package" ]; then
              echo "Publishing $(basename $package)"
              dotnet nuget push "$package" --api-key "$NUGET_API_KEY" --source https://api.nuget.org/v3/index.json --skip-duplicate || echo "Failed to publish $package"
            fi
          done
        else
          echo "‚ö†Ô∏è NUGET_API_KEY not set or no packages found, skipping NuGet publish"
        fi