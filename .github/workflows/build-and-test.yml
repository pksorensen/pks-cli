name: Build and Test

on:
  push:
    branches: [ main, develop, release/* ]
    tags-ignore:
      - 'v*' # Ignore version tags to prevent duplicate builds
  pull_request:
    branches: [ main, develop, release/* ]

env:
  DOTNET_VERSION: '8.0.x'
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_NOLOGO: true

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Cache .NET packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Restore dependencies
      working-directory: pks-cli
      run: dotnet restore pks-cli.sln

    - name: Build solution
      working-directory: pks-cli
      run: dotnet build pks-cli.sln --configuration Release --no-restore

    - name: Run tests
      working-directory: pks-cli
      run: dotnet test pks-cli.sln --configuration Release --no-build --verbosity normal --logger trx --results-directory TestResults

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: pks-cli/TestResults/*.trx

  package-and-validate:
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      working-directory: pks-cli
      run: dotnet restore pks-cli.sln

    - name: Create packages
      working-directory: pks-cli
      run: dotnet pack pks-cli.sln --configuration Release --output ./packages --no-restore

    - name: List created packages
      working-directory: pks-cli
      run: |
        echo "📦 Created packages:"
        ls -la packages/*.nupkg

    - name: Verify CLI package
      working-directory: pks-cli
      run: |
        echo "🔍 Verifying CLI package structure..."
        CLI_PACKAGE=$(find packages -name "pks-cli*.nupkg" | head -1)
        if [ -n "$CLI_PACKAGE" ]; then
          echo "✅ CLI package found: $(basename $CLI_PACKAGE)"
          echo "📋 Package size: $(du -h $CLI_PACKAGE | cut -f1)"
        else
          echo "❌ CLI package not found"
          exit 1
        fi

    - name: Verify template packages
      working-directory: pks-cli
      run: |
        echo "🔍 Verifying template packages..."
        TEMPLATE_PACKAGES=$(find packages -name "*.Templates.*.nupkg")
        if [ -n "$TEMPLATE_PACKAGES" ]; then
          echo "✅ Template packages found:"
          for pkg in $TEMPLATE_PACKAGES; do
            echo "  - $(basename $pkg) ($(du -h $pkg | cut -f1))"
          done
        else
          echo "❌ No template packages found"
          exit 1
        fi

    - name: Test template installation
      working-directory: pks-cli
      run: |
        echo "🧪 Testing template installation..."
        mkdir -p test-install
        cd test-install
        
        for template_pkg in ../packages/*.Templates.*.nupkg; do
          if [ -f "$template_pkg" ]; then
            echo "Installing: $(basename $template_pkg)"
            dotnet new install "$template_pkg" --force
            
            # Try to uninstall to clean up
            pkg_name=$(basename "$template_pkg" .nupkg)
            dotnet new uninstall "$pkg_name" || true
          fi
        done

    - name: Upload packages
      uses: actions/upload-artifact@v4
      with:
        name: packages
        path: pks-cli/packages/*.nupkg
        retention-days: 30

  release-check:
    runs-on: ubuntu-latest
    needs: [build-and-test, package-and-validate]
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Create release packages
      working-directory: pks-cli
      run: |
        dotnet restore pks-cli.sln
        dotnet pack pks-cli.sln --configuration Release --output ./release-packages

    - name: Prepare release notes
      working-directory: pks-cli
      run: |
        echo "## PKS CLI Release $(echo $GITHUB_REF | sed 's/refs\/tags\///g')" > release-notes.md
        echo "" >> release-notes.md
        echo "### Packages Included:" >> release-notes.md
        echo "" >> release-notes.md
        for pkg in release-packages/*.nupkg; do
          echo "- $(basename $pkg)" >> release-notes.md
        done
        echo "" >> release-notes.md
        echo "### Installation:" >> release-notes.md
        echo "" >> release-notes.md
        echo "```bash" >> release-notes.md
        echo "# Install PKS CLI global tool" >> release-notes.md
        echo "dotnet tool install -g pks-cli" >> release-notes.md
        echo "" >> release-notes.md
        echo "# Install templates" >> release-notes.md
        for template_pkg in release-packages/*.Templates.*.nupkg; do
          if [ -f "$template_pkg" ]; then
            echo "dotnet new install $(basename $template_pkg)" >> release-notes.md
          fi
        done
        echo '```' >> release-notes.md

    - name: Upload release artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-packages
        path: |
          pks-cli/release-packages/*.nupkg
          pks-cli/release-notes.md